//
// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
syntax = "proto3";

import "github.com/golang/protobuf/ptypes/any/any.proto";
import "github.com/google/protobuf/src/google/protobuf/descriptor.proto";

// Package gNMI defines a service specification for the gRPC Network Management
// Interface. This interface is defined to be a standard interface via which
// a network management system ("client") can subscribe to state values,
// retrieve snapshots of state information, and manipulate the state of a data
// tree supported by a device ("target").
//
// This document references the gNMI Specification which can be found at
// http://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi.md
package smetric_rpc;

// Define a protobuf FileOption that defines the gNMI service version.
extend google.protobuf.FileOptions {
    // The gNMI service semantic version.
    string gnmi_service = 1001;
}

// gNMI_service is the current version of the gNMI service, returned through
// the Capabilities RPC.
option (gnmi_service) = "0.2.0";

service gNMI {
    // Subscribe allows a client to request the target to send it values
    // of particular paths within the data tree. These values may be streamed
    // at a particular cadence (STREAM), sent one off on a long-lived channel
    // (POLL), or sent as a one-off retrieval (ONCE).
    // Reference: gNMI Specification Section 3.5
    rpc Subscribe(stream SubscribeRequest) returns (stream SubscribeResponse);
}

// ModelData is used to describe a set of schema modules. It can be used in a
// CapabilityResponse where a target reports the set of modules that it
// supports, and within the SubscribeRequest and GetRequest messages to specify
// the set of models from which data tree elements should be reported.
// Reference: gNMI Specification Section 3.2.3
message ModelData {
    string name = 1;            // Name of the model.
    string organization = 2;    // Organization publishing the model.
    string version = 3;         // Semantic version of the model.
}

// Notification is a re-usable message that is used to encode data from the
// target to the client. A Notification carries two types of changes to the data
// tree:
//  - Deleted values (delete) - a set of paths that have been removed from the
//    data tree.
//  - Updated values (update) - a set of path-value pairs indicating the path
//    whose value has changed in the data tree.
// Reference: gNMI Specification Section 2.1
message Notification {
    int64 timestamp = 1;          // Timestamp in nanoseconds since Epoch.
    Path prefix = 2;              // Prefix used for paths in the message.
    // An alias for the path specified in the prefix field.
    // Reference: gNMI Specification Section 2.4.2
    string alias = 3;
    repeated Update update = 4;   // Data elements that have changed values.
    repeated Path delete = 5;     // Data elements that have been deleted.
}

// Update is a re-usable message that is used to store a particular Path,
// Value pair.
// Reference: gNMI Specification Section 2.1
message Update {
    Path path = 1;    // The path (key) for the update.
    Value value = 2;  // The value (value) for the update.
}

// Path encodes a data tree path as a series of repeated strings, with
// each element of the path representing a data tree node name and the
// associated attributes.
// Reference: gNMI Specification Section 2.2.2.
message Path {
    repeated string element = 1;    // An element of the path.
    string origin = 2;              // Label to disambiguate the path.
}

// Value encodes a data tree node's value - along with the way in which
// the value is encoded.
// Reference: gNMI Specification Section 2.2.3.
message Value {
    bytes value = 1;      // Value of the variable being transmitted.
    Encoding type = 2;    // Encoding used for the value field.
}

// Encoding defines the value encoding formats that are supported by the gNMI
// protocol. These encodings are used by both the client (when sending Set
// messages to modify the state of the target) and the target when serializing
// data to be returned to the client (in both Subscribe and Get RPCs).
// Reference: gNMI Specification Section 2.3
enum Encoding {
    JSON = 0;           // JSON encoded text.
    BYTES = 1;          // Arbitrarily encoded bytes.
    PROTO = 2;          // Encoded according to out-of-band agreed Protobuf.
    ASCII = 3;          // ASCII text of an out-of-band agreed format.
    JSON_IETF = 4;      // JSON encoded text as per RFC7951.
}

// Error message used by the target to return errors to the client.
// Reference: gNMI Specification Section 2.5
message Error {
    uint32 code = 1;                // Canonical gRPC error code.
    string message = 2;             // Human readable error.
    google.protobuf.Any data = 3;   // Optional additional information.
}

// SubscribeRequest is the message sent by the client to the target when
// initiating a subscription to a set of paths within the data tree. The
// request field must be populated and the initial message must specify a
// SubscriptionList to initiate a subscription. The message is subsequently
// used to define aliases or trigger polled data to be sent by the target.
// Reference: gNMI Specification Section 3.5.1.1
message SubscribeRequest {
    oneof request {
        SubscriptionList subscribe = 1; // Specify the paths within a subscription.
        Heartbeat heartbeat = 2;        // See description for Heartbeat
        Poll poll = 3;                  // Trigger a polled update.
        AliasList aliases = 4;          // Aliases to be created.
    }
}

// Poll is sent within a SubscribeRequest to trigger the device to
// send telemetry updates for the paths that are associated with the
// subscription.
// Reference: gNMI Specification Section Section 3.5.1.4
message Poll {
}

// A Heartbeat requests a (possibly repeated) response from the remote side.
message Heartbeat {
    // interval is the maximum amount of time, in nanoseconds, between subsequent
    // messages from the remote side.  An empty message may be sent if no other
    // messages are pending.  If interval is 0 then the remote must immediately
    // respond with a (possibly empty) message.
    uint64 interval = 1;
}

// SubscribeResponse is the message used by the target within a Subscribe RPC.
// The target includes a Notification message which is used to transmit values
// of the path(s) that are associated with the subscription. The same message
// is to indicate that the target has sent all data values once (is
// synchronized). The error field is used to report errors that occur during
// creation of a subscription.
// Reference: gNMI Specification Section 3.5.1.4
message SubscribeResponse {
    oneof response {
        Notification update = 1;    // Changed or sampled value for a path.
        Heartbeat heartbeat = 2;    // See description for Heartbeat
        bool sync_response = 3;     // Indicate target has sent all values once.
        Error error = 4;            // Report an occurred in the Subscription.
    }
}

// SubscriptionList is used within a Subscribe message to specify the list of
// paths that the client wishes to subscribe to. The message consists of a
// list of (possibly prefixed) paths, and options that relate to the
// subscription.
// Reference: gNMI Specification Section 3.5.1.2
message SubscriptionList {
    Path prefix = 1;                          // Prefix used for paths.
    repeated Subscription subscription = 2;   // Set of subscriptions to create.
    // Whether target defined aliases are allowed within the subscription.
    bool use_aliases = 3;
    QOSMarking qos = 4;                       // DSCP marking to be used.
    // Mode of the subscription.
    enum Mode {
        STREAM = 0; // Values streamed by the target (Sec. 3.5.1.5.2).
        ONCE = 1;   // Values sent once-off by the target (Sec. 3.5.1.5.1).
        POLL = 2;   // Values sent in response to a poll request (Sec. 3.5.1.5.3).
    }
    Mode mode = 5;
    ModelData use_model = 6;
}

// Subscription is a single request within a SubscriptionList. The path
// specified is interpreted (along with the prefix) as the elements of the data
// tree that the client is subscribing to. The mode determines how the target
// should trigger updates to be sent.
// Reference: gNMI Specification Section 3.5.1.3
message Subscription {
    Path path = 1;                    // The data tree path.
    SubscriptionMode mode = 2;        // Subscription mode to be used.
    SubscriptionOperation op = 3;     // Operation
    uint64 sample_interval = 4;       // ns between samples in SAMPLE mode.
    // Indicates whether values that not changed should be sent in a SAMPLE
    // subscription.
    bool suppress_redundant = 5;
    // Specifies the maximum allowable silent period in nanoseconds when
    // suppress_redundant is in use. The target should send a value at least once
    // in the period specified.
    uint64 heartbeat_interval = 6;
    Encoding encoding = 7;                // Encoding to be used.
}

// SubscriptionMode is the mode of the subscription, specifying how the
// target must return values in a subscription.
// Reference: gNMI Specification Section 3.5.1.3
enum SubscriptionMode {
    TARGET_DEFINED = 0;  // The target selects the relevant mode for each element.
    ON_CHANGE      = 1;  // The target sends an update on element value change.
    SAMPLE         = 2;  // The target samples values according to the interval.
}

// SubscriptionOperation is the operation of the subscription, sepcifying
// if is subscribe or subscibe_cancel
enum SubscriptionOperation {
    SUBSCRIBE_ADD = 0;
    SUBSCRIBE_CANCEL = 1;
}

// QOSMarking specifies the DSCP value to be set on transmitted telemetry
// updates from the target.
// Reference: gNMI Specification Section 3.5.1.2
message QOSMarking {
    uint32 marking = 1;
}

// Alias specifies a data tree path, and an associated string which defines an
// alias which is to be used for this path in the context of the RPC. The alias
// is specified as a string which is prefixed with "#" to disambiguate it from
// data tree element paths.
// Reference: gNMI Specification Section 2.4.2
message Alias {
    Path path = 1;     // The path to be aliased.
    string alias = 2;  // The alias value, a string prefixed by "#".
}

// AliasList specifies a list of aliases. It is used in a SubscribeRequest for
// a client to create a set of aliases that the target is to utilize.
// Reference: gNMI Specification Section 3.5.1.6
message AliasList {
    repeated Alias alias = 1;    // The set of aliases to be created.
}

// UDPWrapper adds metadata necessary for encapsulating a list of notifications
// into a UDP packet.  It adds the ability to identify the target that
// originated the Notifications, detect packet loss, and identify latency
// introduced by the target wrapping notifications.
//
// The target should keep the total size of a serialized UDPWrapper message
// small enough to not cause IP packet fragmentation.
message UDPWrapper {
    // ID Identifies the target (e.g., Loopback IP address, linecard, ...)
    // TODO(borman): Add examples.  Perhaps agent/module/submodule for vendor.
    Path id = 1;

    // Optional Epoch time of when the message is queued for transmit.
    // Useful to quantify delay between message generation and transmission.
    uint64 transmit_timestamp = 2;

    // The sequence_number must start at 1 and increment by 1 for each new packet
    // sent.  A client may use this to determine if a packet was lost.
    uint64 sequence_number = 3;

    repeated Notification notification = 4;
}
