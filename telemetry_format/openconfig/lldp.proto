//
// Copyright 2016 YUNQI TECH Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

//import "openconfig-lldp-types.proto";
//import "openconfig-interfaces.proto";
//import "ietf-yang-types.proto";
//import "openconfig-extensions.proto";

package proto.lldp;

// Paths:
// lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state
// lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/config
// lldp/interfaces/interface/neighbors/neighbor/capabilities/capability
// lldp/interfaces/interface/neighbors/neighbor/capabilities
// lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state
// lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/config
// lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv
// lldp/interfaces/interface/neighbors/neighbor/custom-tlvs
// lldp/interfaces/interface/neighbors/neighbor/state
// lldp/interfaces/interface/neighbors/neighbor
// lldp/interfaces/interface/neighbors
// lldp/interfaces/interface/state/counters
// lldp/interfaces/interface/state
// lldp/interfaces/interface/config
// lldp/interfaces/interface
// lldp/interfaces
// lldp/state/counters
// lldp/state
// lldp/config
// lldp

enum ChassisIdType {
    CHASSIS_ID_CHASSIS_COMPONENT = 0;
    CHASSIS_ID_INTERFACE_ALAIS = 1;
    CHASSIS_ID_PORT_COMPONENT = 2;
    CHASSIS_ID_MAC_ADDRESS = 3;
    CHASSIS_ID_NETWORK_ADDRESS = 4;
    CHASSIS_ID_INTERFACE_NAME = 5;
    CHASSIS_ID_LOCAL = 6;
}

enum PortIdType {
    PORT_ID_TYPE_INTERFACE_ALIAS = 0;
    PORT_ID_TYPE_PORT_COMPONENT = 1;
    PORT_ID_TYPE_MAC_ADDRESS = 2;
    PORT_ID_TYPE_NETWORK_ADDRESS = 3;
    PORT_ID_TYPE_INTERFACE_NAME = 4;
    PORT_ID_TYPE_AGENT_CIRCUIT_ID= 5;
    PORT_ID_TYPE_LOCAL = 6;
}

message CapabilityState {
    string name = 1;
    bool enabled = 2;
}

message CapabilityConfig {
}

message CapabilitiesCapability {
    CapabilityConfig config = 1;
    CapabilityState state = 2;
}

message NeighborCapabilities {
    repeated CapabilitiesCapability capability = 1;
}

message TlvState {
    int32 type = 1;
    string oui = 2;
    string oui_subtype = 3;
    bytes value = 4;
}

message TlvConfig {
}

message CustomTlvsTlv {
    TlvConfig config = 1;
    TlvState state = 2;
}

message NeighborCustomTlvs {
    repeated CustomTlvsTlv tlv = 1;
}

message NeighborState {
    string system_name = 1;
    string system_description = 2;
    string chassis_id = 3;
    ChassisIdType chassis_id_type = 4;
    string id = 5;
    uint64 age = 6;
    int64 last_update = 7;
    string port_id = 8;
    PortIdType port_id_type = 9;
    string port_description = 10;
    string management_address = 11;
    string management_address_type = 12;
}

message NeighborsNeighbor {
    NeighborState state = 2;
    NeighborCustomTlvs custom_tlvs = 3;
    NeighborCapabilities capabilities = 4;
}

message InterfaceNeighbors {
    repeated NeighborsNeighbor neighbor = 1;
}

message CommonStateCounters {
    uint64 frame_in = 1;
    uint64 frame_out = 2;
    uint64 frame_error_in = 3;
    uint64 frame_discard = 4;
    uint64 tlv_discard = 5;
    uint64 tlv_unknown = 6;
    uint64 last_clear = 7;
    uint64 frame_error_out = 8;
}

message InterfaceState {
    string name = 1;
    bool enabled = 2;
    CommonStateCounters counters = 3;
}

message InterfaceConfig {
    string name = 1;
    bool enabled = 2;
}

message InterfacesInterface {
    InterfaceConfig config = 1;
    InterfaceState state = 2;
    InterfaceNeighbors neighbors = 3;
}

message LldpInterfaces {
    repeated InterfacesInterface interface = 1;
}

message LldpState {
    bool enabled = 1;
    uint64 hello_timer = 2;
    string suppress_tlv_advertisement = 3;
    string system_name = 4;
    string system_description = 5;
    string chassis_id = 6;
    ChassisIdType chassis_id_type = 7;
}

message LldpConfig {
    bool enabled = 1;
    uint64 hello_timer = 2;
    string suppress_tlv_advertisement = 3;
    string system_name = 4;
    string system_description = 5;
    string chassis_id = 6;
    ChassisIdType chassis_id_type = 7;
}

message Lldp {
    LldpConfig config = 1;
    LldpState state = 2;
    LldpInterfaces interfaces = 3;
}

